<!DOCTYPE html>
<html style="margin: 0px; width: 100%; height: 100%; overflow: hidden;" prefix="og: http://ogp.me/ns#">
<head>
  <% include ../partials/header.ejs %>
</head>
<body style="margin: 0px; width: 100%; height: 100%; -moz-user-select: none; -webkit-user-select: none; -ms-user-select:none; user-select:none;-o-user-select:none; background-color: black;" 
 unselectable="on"
 onselectstart="return false;" >
<!-- Google Tag Manager -->
<noscript><iframe src="//www.googletagmanager.com/ns.html?id=GTM-5S5TFX"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-5S5TFX');</script>
<!-- End Google Tag Manager -->

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/fi_FI/sdk.js#xfbml=1&version=v2.7&appId=" + fbAppId;
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

  <div id="map" style="margin: 0px; width: 100%; height: 100%;"></div>
  
  <!-- Splash screen -->
  <div id="splash-screen" style="margin: 0px; width: 100%; height: 100%; z-index: 2;  background: black; top: 0; left: 0; position: absolute;">
    <div style="display:flex;justify-content:center;align-items:center;">
      <div style="width:320px;height:460px;"><img src="/poiju-splash.png"/></div>
    </div>
  </div>

  <button type="button" class="btn btn-secondary" style="top: 0; left: 0; position: absolute; margin: 10px 0 0 10px" id="side-menu"><img width="20" src="images/menu.png"/></button>

  <% include ../partials/modals.ejs %>

  <% include ../partials/sidemenu.ejs %>

  <script>

  /* Spinner start */
  var opts = {
      lines: 12 // The number of lines to draw
    , length: 26 // The length of each line
    , width: 12 // The line thickness
    , radius: 40 // The radius of the inner circle
    , scale: 0.5 // Scales overall size of the spinner
    , corners: 1 // Corner roundness (0..1)
    , color: '#fff' // #rgb or #rrggbb or array of colors
    , opacity: 0.25 // Opacity of the lines
    , rotate: 0 // The rotation offset
    , direction: 1 // 1: clockwise, -1: counterclockwise
    , speed: 1 // Rounds per second
    , trail: 60 // Afterglow percentage
    , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
    , zIndex: 3 // The z-index (defaults to 2000000000)
    , className: 'spinner' // The CSS class to assign to the spinner
    , top: '50%' // Top position relative to parent
    , left: '50%' // Left position relative to parent
    , shadow: true // Whether to render a shadow
    , hwaccel: false // Whether to use hardware acceleration
    , position: 'absolute' // Element positioning
  }

  var target = document.getElementById('map')
  var spinner = new Spinner(opts).spin(target);
  /* Spinner end */

  //localStorage.clear()
  // Close the disclaimer in case it has been shown:
  if ( localStorage.getItem( "disclaimerShown" ) === "true" )
  {
    $(".alert").alert('close')
  }

  //localStorage.clear()

  $("#disclaimer").on('close.bs.alert', function () {
    console.log( "closed" )
    localStorage.setItem( "disclaimerShown", "true" )
  })

  var mapInitialized = false;

  // Init position from last location:
  var initialPosition = [ localStorage.getItem('lastLong') || defaultLocation[0] , localStorage.getItem('lastLat') || defaultLocation[1] ];

  var map = new mapboxgl.Map({
      attributionControl : false,
      container: 'map',
      style: 'mapbox://styles/milkandcream/ciq8l0lox0084danift92gyxv',
      center: initialPosition,
      zoom: 12,
      maxBounds: maxBounds,
      minZoom: minZoom
  });

  // Update marker position and map center:
  function updateMarkerPosition( coordinates ) {
    localStorage.setItem( 'lastLong', coordinates[0] )
    localStorage.setItem( 'lastLat', coordinates[1] )

    // Center map on first load:
    if ( !mapInitialized )
    {
      map.setCenter( coordinates )
      mapInitialized = true;
    }

    if ( localStorage.getItem('followLoc') === 'true'  )
    {
      map.flyTo({
          center: coordinates,
          options: { curve : 0.01, speed: 0.1}
      });
    }

    map.getSource('boat').setData( {
                  "type": "Feature",
                  "geometry": {
                      "type": "Point",
                      "coordinates": coordinates
                  },
                  "properties": {
                      "title": "",
                      "marker-symbol": "ferry-15"
                  }
              } )
  }

  // Set error marker on map if geolocation fails:
  function locationErrorMarker() {
    var pos = [ localStorage.getItem('lastLong') || defaultLocation[0] , localStorage.getItem('lastLat') || defaultLocation[1] ]
    
    map.getSource('boat').setData( {
                  "type": "Feature",
                  "geometry": {
                      "type": "Point",
                      "coordinates": pos
                  },
                  "properties": {
                      "title": "",
                      "marker-symbol": "cross-11"
                  }
              } )
  }

  // Get new geolocation:
  function updateLocation() {

    navigator.geolocation.getCurrentPosition(function(position) {
      pos = [ position.coords.longitude, position.coords.latitude ];

      // Update boat marker position on map:
      updateMarkerPosition( pos );
      spinner.stop();

      var elem = document.getElementById("splash-screen");
      if ( elem ) {
        elem.remove();
      }
    }, function() {
      handleLocationError(true);
    },
    {
      enableHighAccuracy: true
    });
  }
  
  // Error handling if geolocation fails:
  function handleLocationError(browserHasGeolocation, infoWindow, pos) {
    locationErrorMarker()
    console.log(browserHasGeolocation ?
                          'Error: The Geolocation service failed.' :
                          'Error: Your browser doesn\'t support geolocation.');
    spinner.stop();

    var elem = document.getElementById("splash-screen");
    if ( elem ) {
      elem.remove();
    }
  }

  var navigationControl = new mapboxgl.NavigationControl()
  map.addControl( navigationControl , 'top-right' );

  var geoLocateControl = new mapboxgl.GeolocateControl();
  geoLocateControl.on( 'geolocate' , function(data) { updateLocation( [ data.coords.longitude , data.coords.latitude ])});
  map.addControl( geoLocateControl, 'bottom-left' );

  //var geoCoderControl = new MapboxGeocoder({ accessToken: mapboxgl.accessToken })
  /*, placeholder: 'Etsi kohdetta', container: document.getElementById('searchLocation'), country: 'fi', types: 'region,postcode,place,locality,neighborhood,address'} OLD SETTINGS, NOT WORKING*/
  //map.addControl( geoCoderControl );

  map.on('load', function () {

    var pos = [ localStorage.getItem('lastLong') || defaultLocation[0] , localStorage.getItem('lastLat') || defaultLocation[1] ];

    map.addSource("boat", {
        "type": "geojson",
        "data": {
          "type": "Feature",
          "geometry": {
              "type": "Point",
              "coordinates": pos
          },
          "properties": {
              "title": "",
              "marker-symbol": "cross-15"
          }
        }
    });

    map.addLayer({
        "id": "boat",
        "type": "symbol",
        "source": "boat",
        "layout": {
            "icon-image": "{marker-symbol}",
            "text-field": "{title}",
            "text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
            "text-offset": [0, 0.6],
            "text-anchor": "top"
        }
    });

    if ( localStorage.getItem( 'savedRoutePlan' ) ) {
      addRouteLayer( localStorage.getItem( 'savedRoutePlan' ) )
    }

    // Try HTML5 geolocation:
    if (navigator.geolocation) {

      // Load initial location:
      updateLocation();

      // Set interval for updating marker position:
      window.setInterval(function() {
          
          if ( localStorage.getItem('updateLoc') === 'true' ) {
            updateLocation();
          }

          else {
            locationErrorMarker();
          }

      }, locationUpdateInterval );

    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false);
    }
  });

  </script>

  <!-- Route file JavaScripts: -->
  <script type="text/javascript">
    document.getElementById('routeFile').onchange = function(evt) {
        if(!window.FileReader) return; // Browser is not compatible

        var reader = new FileReader();

        reader.onload = function(evt) {
            if(evt.target.readyState != 2) return;
            if(evt.target.error) {
                alert('Error while reading file');
                return;
            }

            localStorage.setItem( 'savedRoutePlan' , evt.target.result );

            addRouteLayer( evt.target.result );
        };

        reader.readAsText(evt.target.files[0]);
    };

    function addRouteLayer( rawData ) {

      if ( rawData != "" ) {
        $("#clearRouteButton").show();
      }

      else {
        return
      }

      // Clean up route source and layer:
      if ( map.getSource('routePlan') ) {
        map.removeSource('routePlan');
      }

      if ( map.getLayer('route') ) {
        map.removeLayer('route');
      }

      var parser = new DOMParser();
      var doc = parser.parseFromString( rawData, "application/xml");

      //console.log( JSON.stringify( toGeoJSON.kml( doc  ) ) );

      var sourceObj = new mapboxgl.GeoJSONSource({
         data: toGeoJSON.kml( doc )
      });

      map.addSource('routePlan', sourceObj); // add

       map.addLayer({
          "id": "route",
          "type": "line",
          "source": "routePlan",
          "layout": {
              "line-join": "round",
              "line-cap": "round"
          },
          "paint": {
              "line-color": "orange",
              "line-width": 2
          }
      }, 'sand');
    }


  </script>

</body>
</html>
